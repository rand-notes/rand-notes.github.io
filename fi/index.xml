<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fis on idk</title><link>https://rand-notes.github.io/fi/</link><description>Recent content in Fis on idk</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 02 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://rand-notes.github.io/fi/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://rand-notes.github.io/fi/pa163/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rand-notes.github.io/fi/pa163/1/</guid><description>Omezení Množina doménových proměnných Y = {y_1, &amp;hellip;, y_k} Konečná množina hodnota (doména) D = D_1 \cup D_2 \cup D-k
Omezení (podmínka) c na Y je podmnožina D_1 x &amp;hellip; x D_k tj. relace
příklad:
promenne: A, B domény: {0, 1} pro A; {1,2} pro B omezení: A != B
Problém splňování podmínek (CSP) konečná množina proměnných X = {x1,&amp;hellip;,xn} konečná množina hodnot (doména) D = D1 \cup &amp;hellip; \cup Dn konečná množina omezení C = {c1,&amp;hellip;,cm}</description></item><item><title>asd</title><link>https://rand-notes.github.io/pa163/exam2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rand-notes.github.io/pa163/exam2/</guid><description>CSP je silně k-konzistentní právě tehdy, když je j-konzistentní pro každé j≤k
Cesta (V0, V1, &amp;hellip; , Vm) je konzistentní právě tehdy, když pro každou dvojici hodnot x∈D0 a y∈Dm splňující binární podmínky na hraně V0, Vm existuje ohodnocení proměnných V1, &amp;hellip; Vm−1 takové, že všechny binární podmínky mezi sousedy Vj, Vj+1 jsou splněny.
CSP je konzistentní po cestě, právě když jsou všechny cesty konzistentní.
šířka grafu je minimum z šířek všech jeho uspořádaných grafů.</description></item><item><title>exam PA163</title><link>https://rand-notes.github.io/pa163/exam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rand-notes.github.io/pa163/exam/</guid><description>funfacts Hranová konzistence je směrová - konzistence hrany (Vi, Vj) nezaručuje konzistenci hrany (Vj, Vi) Použitím AC odstraníme mnoho nekompatibilních hodnot, ale nedostame reseni problemu ani nevime jestli reseni existuje. PC ⇒ AC, ale AC !⇒ PC CSP na binarni pomoci dualniho problemu vezmeme podminku C_i a prevedeme ji na V_i, ktera bude obsahovat n-tice hodnot, ktere splnuji podminku.
napr. C1 = C + E &amp;gt; 2, kde C ma domenu {1,2,3} a E ma domenu {0,1}.</description></item><item><title>PA163 lec 2</title><link>https://rand-notes.github.io/fi/pa163/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rand-notes.github.io/fi/pa163/2/</guid><description>Grafová reprezentace CSP Reprezentace podmínek intenzionální (matematická/logická formule) extenzionální (výčet k-tic kompatibilních hodnot, 0-1 matice) Graf: vrcholy, hrany (hrana spojuje dva vrcholy) Hypergraf: vrcholy, hrany (hrana spojuje množinu vrcholů) Reprezentace CSP pomocí hypergrafu podmínek: vrchol = proměnná, hyperhrana = podmínka Hypergraf Hypergraf je pojem z teorie grafů. Jedná se o zobecnění pojmu graf. Rozdíl je v tom, že hrany hypergrafu (hyperhrany) mohou spojovat libovolný počet vrcholů, zatímco u grafu spojují hrany vždy dva vrcholy.</description></item><item><title>pa163 lec03</title><link>https://rand-notes.github.io/fi/pa163/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rand-notes.github.io/fi/pa163/3/</guid><description>Konzistence po cestě (PC path consistency) PC-2 Postup Promazu domeny pomoci inicialnich relaci &amp;ndash; kdyz mam V_1 != V_2 vymazu v domene V1 vsechny dvojice, kde V_1 == V_2 do fronty si vlozim vsechny cesty [1] vezmeme z fronty a provedeme revizi pokud pri revizi neco zmenim pridam do queue podle [2] [1] - nejlepe se to dela ze vezmu ze jdu pres vsechny body. napr mame V_1, V_2, V_3 ve trojuhelniku &amp;ndash; do fronty vlozime (V_1, V_2, V_3),(V_1, V_3, V_2),(V_2, V_1, V_3).</description></item></channel></rss>